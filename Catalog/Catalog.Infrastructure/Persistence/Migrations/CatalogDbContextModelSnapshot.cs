// <auto-generated />
using System;
using Catalog.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Catalog.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    partial class CatalogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Catalog.Domain.CategoryAggregate.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", "catalog");
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", "catalog");
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant", "catalog");
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.ProductVariantAttribute", b =>
                {
                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Value", "AttributeId", "ProductVariantId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductVariantAttribute", "catalog");
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews", "catalog");
                });

            modelBuilder.Entity("Catalog.Domain.ProductAttributeAggregate.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributes", "catalog");
                });

            modelBuilder.Entity("Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("InboxMessages", "catalog");
                });

            modelBuilder.Entity("Common.Infrastructure.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("InboxMessageConsumers", "catalog");
                });

            modelBuilder.Entity("Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", "catalog");
                });

            modelBuilder.Entity("Common.Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessageConsumers", "catalog");
                });

            modelBuilder.Entity("Catalog.Domain.CategoryAggregate.Category", b =>
                {
                    b.HasOne("Catalog.Domain.CategoryAggregate.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.Product", b =>
                {
                    b.HasOne("Catalog.Domain.CategoryAggregate.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.ProductVariant", b =>
                {
                    b.HasOne("Catalog.Domain.ProductAggregate.Product", null)
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Catalog.Domain.ProductAggregate.DateTimeRange", "SalePriceEffectivePeriod", b1 =>
                        {
                            b1.Property<Guid>("ProductVariantId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DiscountEnd");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DiscountStart");

                            b1.HasKey("ProductVariantId");

                            b1.ToTable("ProductVariant", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantId");
                        });

                    b.OwnsOne("Catalog.Domain.ProductAggregate.Image", "Image", b1 =>
                        {
                            b1.Property<Guid>("ProductVariantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AltText")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.HasKey("ProductVariantId");

                            b1.ToTable("ProductVariant", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantId");
                        });

                    b.OwnsOne("Common.Domain.Money", "OriginalPrice", b1 =>
                        {
                            b1.Property<Guid>("ProductVariantId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("OriginalPrice");

                            b1.HasKey("ProductVariantId");

                            b1.ToTable("ProductVariant", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantId");
                        });

                    b.OwnsOne("Common.Domain.Money", "SalePrice", b1 =>
                        {
                            b1.Property<Guid>("ProductVariantId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("SalePrice");

                            b1.HasKey("ProductVariantId");

                            b1.ToTable("ProductVariant", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductVariantId");
                        });

                    b.Navigation("Image");

                    b.Navigation("OriginalPrice")
                        .IsRequired();

                    b.Navigation("SalePrice");

                    b.Navigation("SalePriceEffectivePeriod");
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.ProductVariantAttribute", b =>
                {
                    b.HasOne("Catalog.Domain.ProductAttributeAggregate.ProductAttribute", null)
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Domain.ProductAggregate.ProductVariant", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.Review", b =>
                {
                    b.HasOne("Catalog.Domain.ProductAggregate.Product", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Catalog.Domain.ProductAggregate.ReviewRating", "Rating", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Rating");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Reviews", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("Catalog.Domain.CategoryAggregate.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.Product", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Catalog.Domain.ProductAggregate.ProductVariant", b =>
                {
                    b.Navigation("Attributes");
                });
#pragma warning restore 612, 618
        }
    }
}
