// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ordering.Infrastructure.Persistence;

#nullable disable

namespace Ordering.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(OrderingDbContext))]
    partial class OrderingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ordering")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("InboxMessages", "ordering");
                });

            modelBuilder.Entity("Common.Infrastructure.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("InboxMessageConsumers", "ordering");
                });

            modelBuilder.Entity("Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", "ordering");
                });

            modelBuilder.Entity("Common.Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessageConsumers", "ordering");
                });

            modelBuilder.Entity("Ordering.Domain.CartAggregate.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Carts", "ordering");
                });

            modelBuilder.Entity("Ordering.Domain.CartAggregate.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems", "ordering");
                });

            modelBuilder.Entity("Ordering.Domain.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders", "ordering");
                });

            modelBuilder.Entity("Ordering.Domain.OrderAggregate.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AttributesDescription")
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", "ordering");
                });

            modelBuilder.Entity("Ordering.Domain.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttributesDescription")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Products", "ordering");
                });

            modelBuilder.Entity("Ordering.Domain.CartAggregate.CartItem", b =>
                {
                    b.HasOne("Ordering.Domain.CartAggregate.Cart", null)
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ordering.Domain.OrderAggregate.Order", b =>
                {
                    b.OwnsOne("Common.Domain.Money", "Subtotal", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("Subtotal");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Common.Domain.Money", "Total", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("Total");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Ordering.Domain.OrderAggregate.PaymentInfo", "PaymentInfo", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<int>("PaymentMethod")
                                .HasMaxLength(100)
                                .HasColumnType("integer")
                                .HasColumnName("PaymentMethod");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Ordering.Domain.OrderAggregate.ShippingInfo", "ShippingInfo", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.OwnsOne("Common.Domain.Location", "ShippingAddress", b2 =>
                                {
                                    b2.Property<Guid>("ShippingInfoOrderId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("Country");

                                    b2.Property<string>("District")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("District");

                                    b2.Property<string>("Province")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("Province");

                                    b2.Property<string>("Street")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("Street");

                                    b2.Property<string>("Ward")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("Ward");

                                    b2.HasKey("ShippingInfoOrderId");

                                    b2.ToTable("Orders", "ordering");

                                    b2.WithOwner()
                                        .HasForeignKey("ShippingInfoOrderId");
                                });

                            b1.OwnsOne("Common.Domain.Money", "ShippingCosts", b2 =>
                                {
                                    b2.Property<Guid>("ShippingInfoOrderId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("numeric")
                                        .HasColumnName("ShippingCosts");

                                    b2.HasKey("ShippingInfoOrderId");

                                    b2.ToTable("Orders", "ordering");

                                    b2.WithOwner()
                                        .HasForeignKey("ShippingInfoOrderId");
                                });

                            b1.Navigation("ShippingAddress")
                                .IsRequired();

                            b1.Navigation("ShippingCosts")
                                .IsRequired();
                        });

                    b.Navigation("PaymentInfo")
                        .IsRequired();

                    b.Navigation("ShippingInfo")
                        .IsRequired();

                    b.Navigation("Subtotal")
                        .IsRequired();

                    b.Navigation("Total")
                        .IsRequired();
                });

            modelBuilder.Entity("Ordering.Domain.OrderAggregate.OrderItem", b =>
                {
                    b.HasOne("Ordering.Domain.OrderAggregate.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Common.Domain.Money", "OriginalPrice", b1 =>
                        {
                            b1.Property<Guid>("OrderItemId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("OriginalPrice");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItems", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.OwnsOne("Common.Domain.Money", "SalePrice", b1 =>
                        {
                            b1.Property<Guid>("OrderItemId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("SalePrice");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItems", "ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("OriginalPrice")
                        .IsRequired();

                    b.Navigation("SalePrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Ordering.Domain.CartAggregate.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Ordering.Domain.OrderAggregate.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
