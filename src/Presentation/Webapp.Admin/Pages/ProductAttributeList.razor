@page "/admin/product-attributes"
@layout AdminLayout

@inject ProductAttributeService ProductAttributeService
@inject IToastService ToastService

<PageTitle>Product Attribute Management</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4 text-2xl font-bold dark:text-white">Quản lý thuộc tính sản phẩm</h1>

    <div class="mb-4">
        <TextEdit @bind-Text="searchTerm" Placeholder="Tìm kiếm theo tên" class="w-full p-2 border rounded dark:bg-gray-700 dark:text-white" />
    </div>

    <!-- Create Button -->
    <div class="mb-4">
        <Button Color="Color.Primary" Clicked="ShowCreateModal">
            <Icon Name="IconName.Add" /> Thêm thuộc tính
        </Button>
    </div>

    <!-- Categories Table -->
    <Table Responsive ResponsiveMode="TableResponsiveMode.Mobile" Striped Hoverable Narrow>
        <TableHeader>
            <TableHeaderCell>Tên</TableHeaderCell>
            <TableHeaderCell>Hành động</TableHeaderCell>
        </TableHeader>
        <TableBody>
            @if (CurrentPageProductAttributes.Any())
            {
                @foreach (var productAttribute in CurrentPageProductAttributes)
                {
                    <TableRow @key="productAttribute.Id">
                        <TableRowCell>@productAttribute.Name</TableRowCell>
                        <TableRowCell>
                            <div class="d-flex gap-2">
                                <Button Color="Color.Info" Clicked="@(() => ShowEditModal(productAttribute))" Size="Size.Small">
                                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PenNib" />
                                </Button>
                                <Button Color="Color.Danger" Clicked="@(() => ShowDeleteModal(productAttribute))" Size="Size.Small">
                                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Trash" />
                                </Button>
                            </div>
                        </TableRowCell>
                    </TableRow>
                }
            }
            else
            {
                <TableRow>
                    <TableRowCell Class="text-center" ColumnSpan="2">
                        <Text TextSize="TextSize.Large" TextWeight="TextWeight.Bold">Chưa có thuộc tính nào</Text>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
        <TableFooter>
            @if (totalPages > 0)
            {
                <Pagination Class="mt-4 d-block" Alignment="Alignment.End">
                    <PaginationItem Disabled="1 == currentPage" @onclick="Previous">
                        <PaginationLink>
                            <span aria-hidden="true">
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Backward" />
                            </span>
                        </PaginationLink>
                    </PaginationItem>
                    @for (var i = 1; i <= totalPages; i++)
                    {
                        var pageNumber = i;
                        <PaginationItem @key="pageNumber" Active="pageNumber == currentPage">
                            <PaginationLink Page="@pageNumber.ToString()" Clicked="@(() => currentPage = pageNumber)">
                                @pageNumber
                            </PaginationLink>
                        </PaginationItem>
                    }

                    <PaginationItem Disabled="@(totalPages == currentPage || totalPages == 0)" @onclick="Next">
                        <PaginationLink>
                            <span aria-hidden="true">
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Forward" />
                            </span>
                        </PaginationLink>
                    </PaginationItem>
                </Pagination>
            }
        </TableFooter>
    </Table>

    <!-- Create/Edit Modal -->
    <CreateEditProductAttribute @bind-Visible="@showModal"
                                IsEditMode="@isEditMode" ProductAttribute="@currentProductAttribute"
                                OnSubmit="HandleSubmit" />

    <!-- Delete Modal -->
    <DeleteProductAttribute @bind-Visible="@showDeleteModel" ProductAttribute="@selectedForDeleteProductAttribute" OnSubmit="HandleDelete" />
</div>

@code {
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)FilteredProductAttributes.Count() / pageSize);
    private string searchTerm = "";
    private List<AttributeReadModel> productAttributes = new();
    private CreateUpdateProductAttributeRequest currentProductAttribute = new();
    private Guid selectedProductAttributeId;
    private AttributeReadModel selectedForDeleteProductAttribute;
    private bool showModal = false;
    private bool isEditMode = false;
    private bool showDeleteModel = false;


    private IEnumerable<AttributeReadModel> FilteredProductAttributes => string.IsNullOrWhiteSpace(searchTerm)
        ? productAttributes
        : productAttributes.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    private IEnumerable<AttributeReadModel> CurrentPageProductAttributes => FilteredProductAttributes.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private async Task LoadCategoriesAsync()
    {
        var response = await ProductAttributeService.GetProductAttributesAsync();
        if (response.IsSuccess)
        {
            productAttributes = response.Value;
        }
        else
        {
            Console.WriteLine("Error fetching product attributes");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        await base.OnInitializedAsync();
    }

    private void ShowCreateModal()
    {
        currentProductAttribute = new();
        isEditMode = false;
        showModal = true;
    }

    private void ShowEditModal(AttributeReadModel productAttribute)
    {
        selectedProductAttributeId = productAttribute.Id;
        currentProductAttribute = new CreateUpdateProductAttributeRequest
            {
                Name = productAttribute.Name
            };
        isEditMode = true;
        showModal = true;
    }

    private void ShowDeleteModal(AttributeReadModel productAttribute)
    {
        selectedForDeleteProductAttribute = productAttribute;
        showDeleteModel = true;
    }

    private async Task HandleSubmit()
    {
        if (isEditMode)
        {
            var response = await ProductAttributeService.UpdateProductAttributeAsync(selectedProductAttributeId, currentProductAttribute);
            if (response.IsSuccess)
            {
                productAttributes = productAttributes
                                .Select(pa => pa.Id == selectedProductAttributeId ? response.Value : pa)
                                .ToList();

                await ToastService.Success("Chỉnh sửa thành công", options: BuildToastInstanceOptions);
            }
            else
            {
                await ToastService.Error("Chỉnh sửa thất bại", options: BuildToastInstanceOptions);
            }
        }
        else
        {
            var response = await ProductAttributeService.CreateProductAttributeAsync(currentProductAttribute);
            if (response.IsSuccess)
            {
                productAttributes = [.. productAttributes, response.Value];
                await ToastService.Success("Tạo thành công", options: BuildToastInstanceOptions);
            }
            else
            {
                await ToastService.Error("Tạo thất bại", options: BuildToastInstanceOptions);
            }
        }

        showModal = false;
        StateHasChanged();
    }

    private async Task HandleDelete()
    {
        var response = await ProductAttributeService.DeleteProductAttributeAsync(selectedForDeleteProductAttribute.Id);
        if (response.IsSuccess)
        {
            productAttributes = productAttributes.Where(pa => pa.Id != selectedForDeleteProductAttribute.Id).ToList();
            await ToastService.Success("Xoá thành công", options: BuildToastInstanceOptions);
        }
        else
        {
            await ToastService.Error("Xoá thất bại", options: BuildToastInstanceOptions);
        }
        showDeleteModel = false;
        StateHasChanged();
    }

    private void Previous()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void Next()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void BuildToastInstanceOptions(ToastInstanceOptions toastInstanceOptions)
    {
        toastInstanceOptions.Animated = true;
        toastInstanceOptions.AnimationDuration = 300;
        toastInstanceOptions.Autohide = true;
        toastInstanceOptions.AutohideDelay = 3000;
    }
}