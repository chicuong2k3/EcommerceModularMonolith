@page "/admin/categories"
@layout AdminLayout

@inject CategoryService CategoryService
@inject IToastService ToastService

<PageTitle>Category Management</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4 text-2xl font-bold dark:text-white">Quản lý danh mục</h1>

    <div class="mb-4">
        <TextEdit @bind-Text="searchTerm" Placeholder="Tìm kiếm theo tên" class="w-full p-2 border rounded dark:bg-gray-700 dark:text-white" />
    </div>

    <!-- Create Button -->
    <div class="mb-4">
        <Button Color="Color.Primary" Clicked="ShowCreateModal">
            <Icon Name="IconName.Add" /> Thêm danh mục
        </Button>
    </div>

    <!-- Categories Table -->
    <Table Responsive ResponsiveMode="TableResponsiveMode.Mobile" Striped Hoverable Narrow>
        <TableHeader>
            <TableHeaderCell>Tên</TableHeaderCell>
            <TableHeaderCell>Hành động</TableHeaderCell>
        </TableHeader>
        <TableBody>
            @if (CurrentPageCategories.Any())
            {
                @foreach (var category in CurrentPageCategories)
                {
                    <TableRow @key="category.Id">
                        <TableRowCell>@(categoryHierarchyCache.TryGetValue(category.Id, out var hierarchy) ? hierarchy : "")</TableRowCell>
                        <TableRowCell>
                            <div class="d-flex gap-2">
                                <Button Color="Color.Info" Clicked="@(() => ShowEditModal(category))" Size="Size.Small">
                                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PenNib" />
                                </Button>
                                <Button Color="Color.Danger" Clicked="@(() => ShowDeleteModal(category))" Size="Size.Small">
                                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Trash" />
                                </Button>
                            </div>
                        </TableRowCell>
                    </TableRow>
                }
            }
            else
            {
                <TableRow>
                    <TableRowCell Class="text-center" ColumnSpan="2">
                        <Text TextSize="TextSize.Large" TextWeight="TextWeight.Bold">Chưa có danh mục nào</Text>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
        <TableFooter>
            @if (totalPages > 0)
            {
                <Pagination Class="mt-4 d-block" Alignment="Alignment.End">
                    <PaginationItem Disabled="1 == currentPage" @onclick="Previous">
                        <PaginationLink>
                            <span aria-hidden="true">
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Backward" />
                            </span>
                        </PaginationLink>
                    </PaginationItem>
                    @for (var i = 1; i <= totalPages; i++)
                    {
                        var pageNumber = i;
                        <PaginationItem @key="pageNumber" Active="pageNumber == currentPage">
                            <PaginationLink Page="@pageNumber.ToString()" Clicked="@(() => currentPage = pageNumber)">
                                @pageNumber
                            </PaginationLink>
                        </PaginationItem>
                    }
                    <PaginationItem Disabled="@(totalPages == currentPage || totalPages == 0)" @onclick="Next">
                        <PaginationLink>
                            <span aria-hidden="true">
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Forward" />
                            </span>
                        </PaginationLink>
                    </PaginationItem>
                </Pagination>
            }
        </TableFooter>
    </Table>

    <!-- Create/Edit Modal -->
    <CreateEditCategory Categories="@categories.Where(c => c.Id != selectedCategoryId).ToList()"
                        @bind-Visible="@showModal"
                        IsEditMode="@isEditMode" Category="@currentCategory"
                        OnSubmit="HandleSubmit" />

    <!-- Delete Modal -->
    <DeleteCategory @bind-Visible="@showDeleteModel" Category="@selectedForDeleteCategory" OnSubmit="HandleDelete" />
</div>

@code {
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)FilteredCategories.Count() / pageSize);
    private string searchTerm = "";
    private List<CategoryReadModel> categories = new();
    private CreateUpdateCategoryRequest currentCategory = new();
    private Guid selectedCategoryId;
    private CategoryReadModel selectedForDeleteCategory;
    private bool showModal = false;
    private bool isEditMode = false;
    private bool showDeleteModel = false;
    private Dictionary<Guid, string> categoryHierarchyCache = new();


    private IEnumerable<CategoryReadModel> FilteredCategories => string.IsNullOrWhiteSpace(searchTerm)
        ? categories
        : categories.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
    private IEnumerable<CategoryReadModel> CurrentPageCategories => FilteredCategories.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private async Task LoadCategoriesAsync()
    {
        var response = await CategoryService.GetCategoriesAsync();
        if (response.IsSuccess)
        {
            categories = response.Value;
            foreach (var category in categories)
            {
                var hierarchy = await GetCategoryHierarchy(category);
                categoryHierarchyCache[category.Id] = hierarchy;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        await base.OnInitializedAsync();
    }

    private async Task<string> GetCategoryHierarchy(CategoryReadModel category)
    {
        StringBuilder stringBuilder = new();
        stringBuilder.Append(category.Name);
        while (category != null)
        {
            if (category.ParentCategoryId == null)
            {
                break;
            }
            var response = await CategoryService.GetCategoryAsync(category.ParentCategoryId.Value);
            if (response.IsSuccess)
            {
                stringBuilder.Insert(0, $"{response.Value.Name} > ");
                category = response.Value;
            }
            else
            {
                break;
            }
        }

        return stringBuilder.ToString();
    }

    private void ShowCreateModal()
    {
        currentCategory = new();
        isEditMode = false;
        showModal = true;
    }

    private void ShowEditModal(CategoryReadModel category)
    {
        var parentCategory = categories.FirstOrDefault(c => c.Id == category.ParentCategoryId);
        selectedCategoryId = category.Id;
        currentCategory = new CreateUpdateCategoryRequest
            {
                Name = category.Name,
                ParentCategoryId = parentCategory?.Id,
            };
        isEditMode = true;
        showModal = true;
    }

    private void ShowDeleteModal(CategoryReadModel category)
    {
        selectedForDeleteCategory = category;
        showDeleteModel = true;
    }

    private async Task HandleSubmit()
    {
        if (isEditMode)
        {
            var response = await CategoryService.UpdateCategoryAsync(selectedCategoryId, currentCategory);
            if (response.IsSuccess)
            {
                await LoadCategoriesAsync();
                await ToastService.Success("Chỉnh sửa thành công", options: BuildToastInstanceOptions);

            }
            else
            {
                await ToastService.Error("Chỉnh sửa thất bại", options: BuildToastInstanceOptions);
            }
        }
        else
        {
            var response = await CategoryService.CreateCategoryAsync(currentCategory);
            if (response.IsSuccess)
            {
                categories.Add(response.Value);
                categoryHierarchyCache[response.Value.Id] = await GetCategoryHierarchy(response.Value);
                await ToastService.Success("Tạo thành công", options: BuildToastInstanceOptions);
            }
            else
            {
                await ToastService.Error("Tạo thất bại", options: BuildToastInstanceOptions);
            }
        }

        showModal = false;
        StateHasChanged();
    }

    private async Task HandleDelete()
    {
        var response = await CategoryService.DeleteCategoryAsync(selectedForDeleteCategory.Id);
        if (response.IsSuccess)
        {
            await LoadCategoriesAsync();
            await ToastService.Success("Xoá thành công", options: BuildToastInstanceOptions);
        }
        else
        {
            await ToastService.Error("Xoá thất bại", options: BuildToastInstanceOptions);
        }
        showDeleteModel = false;
        StateHasChanged();
    }

    private void Previous()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void Next()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void BuildToastInstanceOptions(ToastInstanceOptions toastInstanceOptions)
    {
        toastInstanceOptions.Animated = true;
        toastInstanceOptions.AnimationDuration = 300;
        toastInstanceOptions.Autohide = true;
        toastInstanceOptions.AutohideDelay = 3000;
    }
}