@page "/admin/products"

@inject ProductService ProductService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Product Management</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4 text-2xl font-bold dark:text-white">Quản lý sản phẩm</h1>

    <div class="mb-4">
        <TextEdit @bind-Text="searchTerm" Placeholder="Tìm kiếm theo tên" class="w-full p-2 border rounded dark:bg-gray-700 dark:text-white" />
    </div>

    <!-- Create Button -->
    <div class="mb-4">
        <Button Color="Color.Primary" Clicked="@(() => NavigationManager.NavigateTo("/admin/create-product"))">
            <Icon Name="IconName.Add" /> Thêm sản phẩm
        </Button>
    </div>

    <!-- Categories Table -->
    <Table Responsive ResponsiveMode="TableResponsiveMode.Mobile" Striped Hoverable Narrow>
        <TableHeader>
            <TableHeaderCell>Tên</TableHeaderCell>
            <TableHeaderCell>Hành động</TableHeaderCell>
        </TableHeader>
        <TableBody>
            @if (products.Any())
            {
                @foreach (var product in products)
                {
                    <TableRow @key="product.Id">
                        <TableRowCell>@product.Name</TableRowCell>
                        <TableRowCell>
                            <div class="d-flex gap-2">
                                <Button Color="Color.Info" Size="Size.Small" Clicked="@(() => ShowEditModal(product))">
                                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PenNib" />
                                </Button>
                                <Button Color="Color.Danger" Clicked="@(() => ShowDeleteModal(product))" Size="Size.Small">
                                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Trash" />
                                </Button>
                            </div>
                        </TableRowCell>
                    </TableRow>
                }
            }
            else
            {
                <TableRow>
                    <TableRowCell Class="text-center" ColumnSpan="2">
                        <Text TextSize="TextSize.Large" TextWeight="TextWeight.Bold">Chưa có sản phẩm nào</Text>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
        <TableFooter>
            @if (totalPages > 0)
            {
                <Pagination Class="mt-4 d-block" Alignment="Alignment.End">
                    <PaginationItem Disabled="1 == currentPage" @onclick="Previous">
                        <PaginationLink>
                            <span aria-hidden="true">
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Backward" />
                            </span>
                        </PaginationLink>
                    </PaginationItem>
                    @for (var i = 1; i <= totalPages; i++)
                    {
                        var pageNumber = i;
                        <PaginationItem @key="pageNumber" Active="pageNumber == currentPage">
                            <PaginationLink Page="@pageNumber.ToString()" Clicked="@(() => currentPage = pageNumber)">
                                @pageNumber
                            </PaginationLink>
                        </PaginationItem>
                    }

                    <PaginationItem Disabled="@(totalPages == currentPage || totalPages == 0)" @onclick="Next">
                        <PaginationLink>
                            <span aria-hidden="true">
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Forward" />
                            </span>
                        </PaginationLink>
                    </PaginationItem>
                </Pagination>
            }
        </TableFooter>
    </Table>

    <!-- Delete Modal -->
    <DeleteProduct @bind-Visible="@showDeleteModel" Product="@selectedForDeleteProduct" OnSubmit="HandleDelete" />
</div>

<EditProduct @ref="@editProduct" @bind-Visible="@showEditModal" Product="EditProduct" OnSubmit="HandleEditSubmit" />

@code {
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private string searchTerm = "";
    private List<ProductReadModel> products = new();
    private Guid selectedProductId;
    private ProductReadModel selectedForDeleteProduct;
    private bool showDeleteModel = false;
    private bool showEditModal = false;
    private UpdateProductRequest EditProduct = new();
    private EditProduct editProduct;

    private async Task LoadProductsAsync()
    {
        var response = await ProductService.GetProductsAsync(new SearchProductsRequest
            {
                PageNumber = currentPage,
                PageSize = pageSize,
                SearchText = searchTerm
            });
        if (response.IsSuccess)
        {
            products = response.Value.Data.ToList();
            totalPages = response.Value.TotalPages;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
        await base.OnInitializedAsync();
    }

    private void ShowDeleteModal(ProductReadModel product)
    {
        selectedForDeleteProduct = product;
        showDeleteModel = true;
    }

    private async Task HandleDelete()
    {
        var response = await ProductService.DeleteProductAsync(selectedForDeleteProduct.Id);
        if (response.IsSuccess)
        {
            products = products.Where(p => p.Id != selectedForDeleteProduct.Id).ToList();
            await ToastService.Success("Xoá thành công", options: BuildToastInstanceOptions);
        }
        else
        {
            await ToastService.Error("Xoá thất bại", options: BuildToastInstanceOptions);
        }
        showDeleteModel = false;
        StateHasChanged();
    }

    private void ShowEditModal(ProductReadModel product)
    {
        selectedProductId = product.Id;
        EditProduct = new UpdateProductRequest
            {
                Name = product.Name,
                Description = product.Description,
                CategoryId = product.CategoryId
            };

        showEditModal = true;
    }

    private async Task HandleEditSubmit()
    {
        EditProduct.Description = await editProduct.EditProductDescriptionEditor.GetHtmlAsync();

        var response = await ProductService.UpdateProductAsync(selectedProductId, EditProduct);
        if (response.IsSuccess)
        {
            await ToastService.Success("Cập nhật thành công", options: BuildToastInstanceOptions);
            await LoadProductsAsync();
        }
        else
        {
            await ToastService.Error("Cập nhật thất bại", options: BuildToastInstanceOptions);
        }

        showEditModal = false;
    }

    private void Previous()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void Next()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void BuildToastInstanceOptions(ToastInstanceOptions toastInstanceOptions)
    {
        toastInstanceOptions.Animated = true;
        toastInstanceOptions.AnimationDuration = 300;
        toastInstanceOptions.Autohide = true;
        toastInstanceOptions.AutohideDelay = 3000;
    }
}