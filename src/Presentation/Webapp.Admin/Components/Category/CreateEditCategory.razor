
<Modal Visible="@Visible" VisibleChanged="@VisibleChanged">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@(IsEditMode ? "Chỉnh sửa danh mục" : "Thêm danh mục")</ModalTitle>
            <CloseButton Clicked="@(() => Visible = false)" />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validations" Mode="ValidationMode.Manual" Model="Category">
                <Validation>
                    <Field>
                        <FieldLabel RequiredIndicator>Tên danh mục</FieldLabel>
                        <TextEdit @bind-Text="Category.Name" Placeholder="Điền tên danh mục">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Danh mục cha</FieldLabel>
                        <Select @bind-SelectedValue="@Category.ParentCategoryId" Loading="@(Categories.Count() == 0)">
                            <ChildContent>
                                <SelectItem TValue="Guid?" Value="@null">Chọn danh mục</SelectItem>
                                @foreach (var category in Categories)
                                {
                                    <SelectItem Value="@category.Id">@category.Name</SelectItem>
                                }
                            </ChildContent>
                        </Select>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@(() => Visible = false)">Thoát</Button>
            <Button Color="Color.Primary" Clicked="Submit">Lưu thay đổi</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    [EditorRequired]
    public bool Visible { get; set; } = false;
    [Parameter]
    [EditorRequired]
    public bool IsEditMode { get; set; } = false;
    [Parameter]
    [EditorRequired]
    public EventCallback OnSubmit { get; set; }
    [Parameter]
    [EditorRequired]
    public List<CategoryReadModel> Categories { get; set; }
    [Parameter]
    [EditorRequired]
    public CreateUpdateCategoryRequest Category { get; set; }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    private Validations validations;
    private async Task Submit()
    {
        if (await validations.ValidateAll())
        {
            await OnSubmit.InvokeAsync();
            await VisibleChanged.InvokeAsync(false);
        }
    }
}
