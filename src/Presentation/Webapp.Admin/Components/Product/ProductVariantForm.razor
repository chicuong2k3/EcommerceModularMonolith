

<Validations Mode="ValidationMode.Auto" Model="Variant">
    <Validation>
        <Field>
            <FieldLabel>Giá</FieldLabel>
            <NumericEdit @bind-Value="Variant.OriginalPrice">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </NumericEdit>
        </Field>
    </Validation>
    <Validation>
        <Field>
            <FieldLabel>Số lượng</FieldLabel>
            <NumericEdit @bind-Value="Variant.Quantity">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </NumericEdit>
        </Field>
    </Validation>

    <div class="mt-3">
        <FieldLabel>Thuộc tính sản phẩm</FieldLabel>
        @for (int i = 0; i < Variant.Attributes.Count; i++)
        {
            var index = i;
            <Fields>
                <Field>
                    <FieldLabel>Tên thuộc tính</FieldLabel>
                    <Select @bind-SelectedValue="@Variant.Attributes[index].Name">
                        <SelectItem TValue="string" Value="@null">Chọn thuộc tính</SelectItem>
                        @foreach (var attr in GetAvailableAttributesFor(index))
                        {
                            <SelectItem Value="@attr.Name">@attr.Name</SelectItem>
                        }
                    </Select>
                </Field>
                <Field>
                    <FieldLabel>Giá trị thuộc tính</FieldLabel>
                    <TextEdit @bind-Text="@Variant.Attributes[index].Value">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </Field>
            </Fields>
            <Button Size="Size.Small" Color="Color.Danger" Clicked="@(() => RemoveAttribute(index))">X</Button>
        }
        @if (true)
        {
            <Button Size="Size.Small" Color="Color.Info" Clicked="AddAttribute">
                Thêm thuộc tính
            </Button>
        }
    </div>

    <Validation>
        <Field>
            <FieldLabel>Giá khuyến mãi</FieldLabel>
            <NumericEdit @bind-Value="Variant.SalePrice">
            </NumericEdit>
        </Field>
    </Validation>
    <Validation>
        <Field>
            <FieldLabel>Thời gian bắt đầu khuyến mãi</FieldLabel>
            <DatePicker @bind-Date="Variant.SaleStartDate" InputFormat="dd/MM/yyyy" DisplayFormat="dd/MM/yyyy">
            </DatePicker>
        </Field>
    </Validation>
    <Validation>
        <Field>
            <FieldLabel>Thời gian kết thúc khuyến mãi</FieldLabel>
            <DatePicker @bind-Date="Variant.SaleEndDate" InputFormat="dd/MM/yyyy" DisplayFormat="dd/MM/yyyy">
            </DatePicker>
        </Field>
    </Validation>
    <Field>
        <FieldLabel>Ảnh</FieldLabel>
        <FileEdit Changed="OnFileChanged" Filter="image/*">
        </FileEdit>
    </Field>
</Validations>

@code {
    [Parameter]
    [EditorRequired]
    public AddVariantRequest Variant { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public List<AttributeReadModel> Attributes { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private IEnumerable<AttributeReadModel> GetAvailableAttributesFor(int index)
    {
        var selectedNames = Variant.Attributes
            .Where((_, i) => i != index)
            .Select(x => x.Name)
            .ToHashSet();

        return Attributes.Where(x => !selectedNames.Contains(x.Name));
    }

    private void AddAttribute()
    {
        Variant.Attributes.Add(new ProductAttributeRequest());
    }

    private void RemoveAttribute(int index)
    {
        Variant.Attributes.RemoveAt(index);
    }

    async Task OnFileChanged(FileChangedEventArgs e)
    {
        try
        {
            var image = e.Files.FirstOrDefault();
            if (image == null)
            {
                return;
            }

            using (MemoryStream result = new MemoryStream())
            {
                await image.OpenReadStream(long.MaxValue).CopyToAsync(result);
                var bytes = result.ToArray();
                Variant.ImageData = Convert.ToBase64String(bytes);
                Variant.ImageAltText = image.Name;
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}
