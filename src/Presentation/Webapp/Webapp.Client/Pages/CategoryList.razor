@page "/admin/categories"
<PageTitle>Danh mục sản phẩm</PageTitle>

<div class="container mx-auto py-10">
    <div class="mb-6 flex items-center justify-between">
        <h2 class="text-2xl font-bold">Danh mục sản phẩm</h2>
        <Button Text="Thêm danh mục" Icon="add" Type="ButtonType.Primary" OnClick="OpenAddDialog" />
    </div>

    <!-- Filter nâng cao -->
    <div class="mb-6 flex flex-col gap-2 md:flex-row md:items-center md:gap-4">
        <Input Placeholder="Tìm kiếm..." Class="w-full md:w-64" @bind-Value="searchTerm" />
    </div>

    <Card>
        <CardContent>
            <Table>
                <TableHeader>
                    <tr>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Price</th>
                        <th class="text-right">Actions</th>
                    </tr>
                </TableHeader>
                <TableBody>
                    @foreach (var product in PagedProducts)
                    {
                        <tr>
                            <td>@product.Name</td>
                            <td>@product.Category</td>
                            <td>$@product.Price</td>
                            <td class="text-right">
                                <div class="flex justify-end gap-2">
                                    <Button Text="Edit" Size="ButtonSize.Small" Type="ButtonType.Outline" OnClick="() => OpenEditDialog(product)" />
                                    <Button Text="Delete" Size="ButtonSize.Small" Type="ButtonType.Destructive" OnClick="() => ShowDeleteConfirmation(product)" />
                                </div>
                            </td>
                        </tr>
                    }
                </TableBody>
            </Table>
        </CardContent>
    </Card>

    <!-- Pagination -->
    <div class="mt-4 flex items-center justify-between">
        <div class="text-sm text-gray-500">
            Showing
            <span class="font-semibold">@((CurrentPage - 1) * PageSize + 1)</span>
            to
            <span class="font-semibold">@((CurrentPage - 1) * PageSize + PagedProducts.Count())</span>
            of
            <span class="font-semibold">@FilteredProducts.Count()</span>
            products
        </div>
        <div class="flex gap-2">
            <Button Text="Prev" Type="ButtonType.Outline" Disabled="@(CurrentPage == 1)" OnClick="PrevPage" />
            <span class="px-2">Page @CurrentPage / @TotalPages</span>
            <Button Text="Next" Type="ButtonType.Outline" Disabled="@(CurrentPage == TotalPages)" OnClick="NextPage" />
        </div>
    </div>

    <!-- Dialog Thêm/Sửa Sản phẩm -->
    <Dialog OnClose="CloseDialog">
        <DialogTitle>@(isEditMode ? "Edit Product" : "Add Product")</DialogTitle>
        <DialogContent>
            <EditForm Model="editingProduct" OnValidSubmit="SaveProduct">
                <div class="flex flex-col gap-4 py-4">
                    <div class="flex items-center gap-4">
                        <span class="w-24 text-right">Name</span>
                        <Input TItem="string" Id="name" @bind-Value="editingProduct.Name" Placeholder="Product name" />
                    </div>
                    <div class="flex items-center gap-4">
                        <span class="w-24 text-right">Category</span>
                        <Input TItem="string" Id="category" @bind-Value="editingProduct.Category" Placeholder="Category" />
                    </div>
                    <div class="flex items-center gap-4">
                        <span class="w-24 text-right">Price</span>
                        <Input TItem="decimal" Id="price" @bind-Value="editingProduct.Price" Placeholder="Price" />
                    </div>
                </div>
                <div class="mt-4 flex justify-end gap-2">
                    <Button Text="Cancel" Type="ButtonType.Outline" OnClick="CloseDialog" />
                    <Button Text="Save" Type="ButtonType.Primary" Action="ButtonAction.Submit" />
                </div>
            </EditForm>
        </DialogContent>
    </Dialog>

    <!-- Dialog xác nhận xóa sản phẩm -->
    <Dialog OnClose="CloseDeleteDialog">
        <DialogTitle>Delete Product</DialogTitle>
        <DialogContent>
            <Alert Type="AlertType.Destructive">
                <div class="mb-1 font-semibold">Are you sure you want to delete this product?</div>
                <div class="text-sm text-gray-500">This action cannot be undone.</div>
                <div class="mt-2 text-sm"><b>Product:</b> @productToDelete?.Name</div>
            </Alert>
            <div class="mt-4 flex justify-end gap-2">
                <Button Text="Cancel" Type="ButtonType.Outline" OnClick="CloseDeleteDialog" />
                <Button Text="Delete" Type="ButtonType.Destructive" OnClick="ConfirmDeleteProduct" />
            </div>
        </DialogContent>
    </Dialog>
</div>

@code {
    private bool showDeleteDialog = false;
    private ProductModel? productToDelete = null;
    private List<ProductModel> Products = new() {
        new ProductModel("iPhone 15", "Electronics", 999),
        new ProductModel("MacBook Pro", "Electronics", 1999),
        new ProductModel("AirPods Pro", "Accessories", 249),
        new ProductModel("Apple Watch", "Wearables", 399),
        new ProductModel("iPad Pro", "Electronics", 1199),
        new ProductModel("Galaxy S23", "Electronics", 899),
        new ProductModel("Dell XPS 13", "Electronics", 1399),
        new ProductModel("Sony WH-1000XM5", "Accessories", 349),
        new ProductModel("Logitech MX Master 3S", "Accessories", 99),
        new ProductModel("Kindle Paperwhite", "Accessories", 129),
        new ProductModel("Fitbit Charge 6", "Wearables", 149),
        new ProductModel("Garmin Forerunner 255", "Wearables", 349),
    };
    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private bool showDialog = false;
    private bool isEditMode = false;
    private ProductModel editingProduct = new ProductModel("", "", 0);

    // Pagination state
    private int CurrentPage = 1;
    private int PageSize = 5;
    private int TotalPages => (int)Math.Ceiling((double)FilteredProducts.Count() / PageSize);

    // Lấy danh sách category duy nhất
    private IEnumerable<string> Categories => Products.Select(p => p.Category).Distinct();

    // Filter nâng cao
    private IEnumerable<ProductModel> FilteredProducts => Products.Where(p =>
        (string.IsNullOrWhiteSpace(searchTerm) || p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(selectedCategory) || p.Category == selectedCategory)
    );

    // Sản phẩm hiển thị trên trang hiện tại
    private IEnumerable<ProductModel> PagedProducts => FilteredProducts.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    void PrevPage()
    {
        if (CurrentPage > 1) CurrentPage--;
    }
    void NextPage()
    {
        if (CurrentPage < TotalPages) CurrentPage++;
    }

    void OpenAddDialog()
    {
        isEditMode = false;
        editingProduct = new ProductModel("", Categories.FirstOrDefault() ?? "", 0);
        showDialog = true;
    }
    void OpenEditDialog(ProductModel product)
    {
        isEditMode = true;
        editingProduct = new ProductModel(product.Name, product.Category, product.Price);
        showDialog = true;
    }
    void CloseDialog()
    {
        showDialog = false;
    }
    void SaveProduct()
    {
        if (isEditMode)
        {
            var prod = Products.FirstOrDefault(p => p.Name == editingProduct.Name && p.Category == editingProduct.Category);
            if (prod != null)
            {
                prod.Price = editingProduct.Price;
            }
        }
        else
        {
            Products.Add(new ProductModel(editingProduct.Name, editingProduct.Category, editingProduct.Price));
        }
        showDialog = false;
    }
    void ShowDeleteConfirmation(ProductModel product)
    {
        productToDelete = product;
        showDeleteDialog = true;
    }
    void CloseDeleteDialog()
    {
        showDeleteDialog = false;
        productToDelete = null;
    }
    void ConfirmDeleteProduct()
    {
        if (productToDelete != null)
        {
            Products.Remove(productToDelete);
            // Nếu xóa hết sản phẩm trên trang hiện tại thì lùi về trang trước nếu có
            if (!PagedProducts.Any() && CurrentPage > 1)
                CurrentPage--;
        }
        showDeleteDialog = false;
        productToDelete = null;
    }
    public class ProductModel
    {
        public string Name { get; set; }
        public string Category { get; set; }
        public decimal Price { get; set; }
        public ProductModel(string name, string category, decimal price)
        {
            Name = name;
            Category = category;
            Price = price;
        }
    }
}
