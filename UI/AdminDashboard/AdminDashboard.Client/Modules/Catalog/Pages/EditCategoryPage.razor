@page "/catalog/categories/{Id:guid}/edit"

@inherits FluxorComponent

@inject ICategoryService CategoryService
@inject IDispatcher Dispatcher
@inject IState<CategoryState> CategoryState
@inject NavigationManager NavigationManager

<PageTitle>Cập nhật danh mục</PageTitle>

<RadzenTemplateForm Data="@model" Submit="@((UpdateCategoryRequest request) => HandleValidSubmit(request))">
    <RadzenStack Gap="8">
        <RadzenStack>
            <RadzenFormField Text="Tên danh mục" Variant="Variant.Outlined" AllowFloatingLabel="false">
                <ChildContent>
                    <RadzenTextBox Name="Name" @bind-Value="@model.NewName" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="Name" Text="Tên danh mục không được để trống." />
                </Helper>
            </RadzenFormField>
            <RadzenFormField Text="Danh mục cha" Variant="Variant.Outlined" AllowFloatingLabel="false">
                <ChildContent>
                    <RadzenDropDown Name="ParentCategoryId"
                                    Data="@CategoryState.Value.Categories"
                                    TextProperty="@nameof(CategoryResponse.Name)"
                                    ValueProperty="@nameof(CategoryResponse.Id)"
                                    @bind-Value="@model.ParentCategoryId" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="ParentCategoryId" Text="Danh mục cha không được để trống." />
                </Helper>
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Flat" Text="Lưu thay đổi" Disabled="@CategoryState.Value.IsUpdating" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Text="Thoát" Click="@(() => NavigationManager.NavigateTo("/catalog/categories"))" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UpdateCategoryRequest model = new();

    protected override void OnInitialized()
    {
        if (!CategoryState.Value.Categories.Any())
        {
            Dispatcher.Dispatch(new FetchCategoriesAction());
        }

        Dispatcher.Dispatch(new SetBreadcrumbAction(new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Trang chủ", "/"),
            new BreadcrumbItem("Danh mục", "/catalog/categories"),
            new BreadcrumbItem("Cập nhật danh mục", "")
        }));

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        var category = CategoryState.Value.Categories.FirstOrDefault(c => c.Id == Id);
        if (category != null)
        {
            model.NewName = category.Name;
            var parentCategory = await CategoryService.GetParentCategoryAsync(category.Id);
            model.ParentCategoryId = parentCategory?.Id;
        }

        await base.OnInitializedAsync();
    }

    private void HandleValidSubmit(UpdateCategoryRequest request)
    {
        Dispatcher.Dispatch(new UpdateCategoryAction(Id, request));
    }
}
