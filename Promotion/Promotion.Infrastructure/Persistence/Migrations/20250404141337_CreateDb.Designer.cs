// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Promotion.Infrastructure.Persistence;

#nullable disable

namespace Promotion.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PromotionDbContext))]
    [Migration("20250404141337_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("promotion")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", "promotion");
                });

            modelBuilder.Entity("CouponCondition", b =>
                {
                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uuid");

                    b.HasKey("ConditionId", "CouponId");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponCondition", "promotion");
                });

            modelBuilder.Entity("Promotion.Domain.ConditionAggregate.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Conditions", "promotion");
                });

            modelBuilder.Entity("Promotion.Domain.CouponAggregate.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CurrentUsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Coupons", "promotion");
                });

            modelBuilder.Entity("Promotion.Domain.CouponAggregate.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("Discounts", "promotion");

                    b.HasDiscriminator<string>("DiscountType").HasValue("Discount");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Promotion.Domain.CouponAggregate.FixedAmountDiscount", b =>
                {
                    b.HasBaseType("Promotion.Domain.CouponAggregate.Discount");

                    b.HasDiscriminator().HasValue("FixedAmount");
                });

            modelBuilder.Entity("Promotion.Domain.CouponAggregate.PercentageDiscount", b =>
                {
                    b.HasBaseType("Promotion.Domain.CouponAggregate.Discount");

                    b.Property<double>("Percentage")
                        .HasColumnType("double precision")
                        .HasColumnName("Percentage");

                    b.HasDiscriminator().HasValue("Percentage");
                });

            modelBuilder.Entity("CouponCondition", b =>
                {
                    b.HasOne("Promotion.Domain.ConditionAggregate.Condition", null)
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Promotion.Domain.CouponAggregate.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Promotion.Domain.CouponAggregate.Coupon", b =>
                {
                    b.HasOne("Promotion.Domain.CouponAggregate.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Promotion.Domain.CouponAggregate.FixedAmountDiscount", b =>
                {
                    b.OwnsOne("Common.Domain.Money", "FixedAmount", b1 =>
                        {
                            b1.Property<Guid>("FixedAmountDiscountId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("FixedAmount");

                            b1.HasKey("FixedAmountDiscountId");

                            b1.ToTable("Discounts", "promotion");

                            b1.WithOwner()
                                .HasForeignKey("FixedAmountDiscountId");
                        });

                    b.Navigation("FixedAmount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
